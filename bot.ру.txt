import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils import executor
from datetime import datetime

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7867876643:AAG9jE7ANXoS73vws1yb1y3xo-_TSQGDM2M"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("finance.db")
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    amount REAL,
    category TEXT,
    date TEXT,
    type TEXT
)
''')
conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
async def add_transaction(amount, category, type_, message: Message):
    date = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("INSERT INTO transactions (amount, category, date, type) VALUES (?, ?, ?, ?)",
                   (amount, category, date, type_))
    conn.commit()
    await message.reply("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
@dp.message(Command("add_income"))
async def add_income(message: Message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `/add_income —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è`")
            return
        amount = float(parts[1])
        category = " ".join(parts[2:])
        await add_transaction(amount, category, "–¥–æ—Ö–æ–¥", message)
    except ValueError:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
@dp.message(Command("add_expense"))
async def add_expense(message: Message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `/add_expense —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è`")
            return
        amount = float(parts[1])
        category = " ".join(parts[2:])
        await add_transaction(-amount, category, "—Ä–∞—Å—Ö–æ–¥", message)
    except ValueError:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
@dp.message(Command("balance"))
async def get_balance(message: Message):
    cursor.execute("SELECT SUM(amount) FROM transactions WHERE type = '–¥–æ—Ö–æ–¥'")
    total_income = cursor.fetchone()[0] or 0

    cursor.execute("SELECT SUM(amount) FROM transactions WHERE type = '—Ä–∞—Å—Ö–æ–¥'")
    total_expense = cursor.fetchone()[0] or 0

    balance = total_income - total_expense
    await message.reply(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
@dp.message(Command("report"))
async def get_report(message: Message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `/report –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î`")
            return
        start_date = parts[1]
        end_date = parts[2]

        cursor.execute("SELECT date, type, amount, category FROM transactions WHERE date BETWEEN ? AND ?",
                       (start_date, end_date))
        transactions = cursor.fetchall()

        if not transactions:
            await message.reply("üìä –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        report_text = "üìä –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {} ‚Äî {}\n".format(start_date, end_date)
        report_text += "-" * 30 + "\n"
        for t in transactions:
            report_text += f"{t[0]} | {t[1]} | {t[2]:.2f} —Ä—É–±. | {t[3]}\n"
        report_text += "-" * 30

        await message.reply(report_text)
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if name == "__main__":
    executor.start_polling(dp, skip_updates=True)